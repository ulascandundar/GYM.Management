@page "/expensetype"
@attribute [Authorize(ManagementPermissions.ExpenseType.Default)]
@using GYM.Management.ExpenseTypes;
@using GYM.Management.Localization;
@using GYM.Management.Permissions;
@using Microsoft.Extensions.Localization;
@using Volo.Abp.Application.Dtos;
@inject IStringLocalizer<ManagementResource> L
@inherits AbpCrudPageBase<IExpenseTypeService, ExpenseTypeDto, Guid, PagedAndSortedResultRequestDto, ExpenseTypeCreateDto>
@inject IExpenseTypeService _expenseTypeService
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>Gider Tipleri</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    Yeni Tip Ekle
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ExpenseTypeDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="ExpenseTypeDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="ExpenseTypeDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="ExpenseTypeDto"
                                          Text="Güncelle"
                                          Clicked="() => OpenEditModalAsync(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="ExpenseTypeDto"
                                Field="@nameof(ExpenseTypeDto.Name)"
                                Caption="İsim"></DataGridColumn>
                <DataGridColumn TItem="ExpenseTypeDto"
                                Field="@nameof(ExpenseTypeDto.Description)"
                                Caption="Açıklama">
                </DataGridColumn>
                <DataGridColumn TItem="ExpenseTypeDto"
                                Field="@nameof(ExpenseTypeDto.CreationTime)"
                                Caption="Eklenme Tarihi">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ExpenseTypeDto"
                                Field="@nameof(ExpenseTypeDto.IsEffect)"
                                Caption="Kasa Etkisi">
                    <DisplayTemplate>
                        @(context.IsEffect ? "Evet":"Hayır")
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>


<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>Yeni Egzersiz</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Açıklama</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Kasayı etkilesinmi?</FieldLabel>
                            <Check TValue="bool" @bind-Checked="@NewEntity.IsEffect"></Check>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="AddData">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Açıklama</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Kasayı etkilesinmi?</FieldLabel>
                            <Check TValue="bool" @bind-Checked="@EditingEntity.IsEffect"></Check>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="EditData">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    private async Task AddData()
    {
        try
        {
            var confirmed = await Message.Confirm($"Gider Tipi eklenecek eminmisiniz.");
            if (confirmed)
            {
                var validate = true;
                if (CreateValidationsRef != null)
                {
                    validate = await CreateValidationsRef.ValidateAll();
                }
                if (validate)
                {
                    var isany = await _expenseTypeService.AnyName(NewEntity.Name);
                    if (!isany)
                    {
                        var data = await _expenseTypeService.CreateAsync(NewEntity);

                        await GetEntitiesAsync();

                        await InvokeAsync(StateHasChanged);
                        await InvokeAsync(CreateModal.Hide);
                        await Notify.Success("Gider Tipi eklendi");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task EditData()
    {
        try
        {
            var validate = true;
            if (EditValidationsRef != null)
            {
                validate = await EditValidationsRef.ValidateAll();
            }
            if (validate)
            {
                var data = await _expenseTypeService.UpdateAsync(EditingEntityId, EditingEntity);
                await GetEntitiesAsync();

                await InvokeAsync(StateHasChanged);
                await InvokeAsync(CreateModal.Hide);
                await Notify.Success("Gider Tipi Güncellendi");
            }

        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
}
