@page "/Member"
@attribute [Authorize(ManagementPermissions.Member.Default)]
@using GYM.Management.AppointmentTransactions;
@using GYM.Management.MemberOrders;
@using GYM.Management.Members;
@using GYM.Management.Permissions
@using GYM.Management.Products;
@using GYM.Management.Trainers;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http.Extensions;
@using Volo.Abp.Application.Dtos
@using GYM.Management.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ManagementResource> L
@inherits AbpCrudPageBase<IMemberService, MemberDto, Guid, PagedAndSortedResultRequestDto, MemberCreateDto>
@inject IMemberService _memberService
@inject ITrainerService _trainerService
@inject IProductService _productService
@inject IMemberOrderService _memberOrderService
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>Üyeler</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    Yeni Üye
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <div id="UserFilterSection" class="row mt-3">
            <Column ColumnSize="ColumnSize.Is12">
                <Field>
                    <FieldLabel>İsim</FieldLabel>
                    <TextEdit TValue="string" KeyPress="OnKeyPress" @bind-Text="@Filter.Name" />
                </Field>
            </Column>
        </div>
        <DataGrid TItem="MemberDto"
                  Data="MemberList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="MemberDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="MemberDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="MemberDto"
                                          Text="Güncelle"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="MemberDto"
                                          Text="Sil"
                                          Clicked="() => DeleteData(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                            <EntityAction TItem="MemberDto"
                                          Text="Ürün Tüketimi Ekle"
                                          Clicked="() => OpenProductModel(context.Id,context.Name)" />
                            <EntityAction TItem="MemberDto"
                                          Text="Randevu Paketi Ekle"
                                          Clicked="() => OpenStockModel(context.Id,context.Name)" />
                            <EntityAction TItem="MemberDto"
                                          Text="Randevu Tüketimi Ekle"
                                          Clicked="() => OpenAppointmentTransaction(context.Id,context.Name)" />
                            <EntityAction TItem="MemberDto"
                                          Text="Detaylı İşlemler"
                                          Clicked="() => NavigateToPage(context.Id)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.Name)"
                                Caption="İsim"></DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.CreationTime)"
                                Caption="Eklenme Tarihi">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.AppointmentStock)"
                                Caption="Randevu Hakkı"></DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.Debt)"
                                Caption="Borç"></DataGridColumn>
                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.TrainerName)"
                                Caption="Antrenör"></DataGridColumn>

                <DataGridColumn TItem="MemberDto"
                                Field="@nameof(MemberDto.BirdthDate)"
                                Caption="Doğum Tarihi">
                    <DisplayTemplate>
                        @context.BirdthDate.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>Yeni Üye</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    
                    <Validation>
                        <Field>
                            <FieldLabel>Telefon</FieldLabel>
                            <TextEdit MaskType="MaskType.Numeric" @bind-Text="@NewEntity.Telephone">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>Doğum Tarihi</FieldLabel>
                        <DatePicker TValue="DateTime" @bind-Date="NewEntity.BirdthDate" />
                    </Field>
                    <Field>
                        <FieldLabel>Antenör Seçimi</FieldLabel>
                        <Select TValue="Guid?" @bind-SelectedValue="@NewEntity.TrainerId">
                            @foreach (var item in TrainerList)
                            {
                                <SelectItem TValue="Guid" Value="@item.Id">
                                    @item.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="AddData">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                   
                    <Validation>
                        <Field>
                            <FieldLabel>Telefon</FieldLabel>
                           <TextEdit MaskType="MaskType.Numeric" @bind-Text="@NewEntity.Telephone">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>Doğum Tarihi</FieldLabel>
                        <DatePicker TValue="DateTime" @bind-Date="EditingEntity.BirdthDate" />
                    </Field>
                </Validations>
                <Field>
                    <FieldLabel>Antenör Seçimi</FieldLabel>
                    <Select TValue="Guid?" @bind-SelectedValue="@EditingEntity.TrainerId">
                        @foreach (var item in TrainerList)
                        {
                            <SelectItem TValue="Guid" Value="@item.Id">
                                @item.Name
                            </SelectItem>
                        }
                    </Select>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="EditData">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>



<Modal @ref="modalRef">
    <ModalContent Size="ModalSize.Fullscreen">
        <ModalHeader>
            <ModalTitle>Ürünler</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>

                <Column ColumnSize="ColumnSize.Is12">
                    <Table FixedHeader FixedHeaderTableHeight="300px">
                        <TableHeader>

                            <TableRow>
                                <TableHeaderCell>Ürün İsmi</TableHeaderCell>
                                <TableHeaderCell>Fiyat</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (ProductList != null)
                            {
                                @foreach (var item in ProductList)
                                {
                                    Func<decimal> calculateTotalPrice = () => item.Quantity * item.BuyPrice;
                                    <TableRow>
                                            <TableRowCell>@item.Name</TableRowCell>
                                            <TableRowCell>@item.BuyPrice</TableRowCell>
                                        @* <TableRowCell>
                                            <Field>
                                           <NumericEdit TValue="int" @bind-Value="item.Quantity" />
                                            </Field>                                            
                                            </TableRowCell>
                                            <TableRowCell>
                                            @calculateTotalPrice()
                                            </TableRowCell>*@
                                            <TableRowCell>
                                            <Column ColumnSize="ColumnSize.IsAuto">
                                                <Button Color="Color.Primary"
                                                Clicked="() => OpenOrderModel(item)">
                                                    Sipariş Ver
                                                </Button>
                                            </Column>
                                            </TableRowCell>
                                    </TableRow>
                                }
                            }

                        </TableBody>
                    </Table>
                </Column>

            </Row>

        </ModalBody>
        <ModalFooter>

        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="stockModelRef">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle> (@selectedName) Randevu Tanımlanıyor...</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
                    <Field>
                        <FieldLabel>Seans Adedi</FieldLabel>
                <NumericPicker TValue="int" @bind-Value="appointmentDto.AppointmentStock"></NumericPicker> TL

                    </Field>
                    <Field>
                        <FieldLabel>Seans Başı Ücret</FieldLabel>
                        <NumericEdit TValue="decimal" @bind-Value="appointmentDto.UnitPrice"></NumericEdit> Tl
                    </Field>
                    <Field>
                        <FieldLabel>Toplam Tutar</FieldLabel>
                <Span>@(appointmentDto.AppointmentStock * appointmentDto.UnitPrice) TL</Span>
                    </Field>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="() => PlaceOrderStock(appointmentDto)">
                    Ekle
                </Button>
            </Column>
               
        </ModalBody>
        <ModalFooter>

        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="productModalRef">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle> @SelectedProduct.Name -- @SelectedProduct.BuyPrice TL</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Adet</FieldLabel>
                <NumericPicker TValue="int" @bind-Value="SelectedProduct.Quantity"></NumericPicker>

            </Field>
            <Field>
                <FieldLabel>Toplam Tutar</FieldLabel>
                <Span>@(SelectedProduct.Quantity * SelectedProduct.BuyPrice) TL</Span>
            </Field>
            <Field>
                <FieldLabel>Antenör Seçimi</FieldLabel>
                <Select TValue="Guid?" @bind-SelectedValue="@SelectedProduct.TrainerId">
                    @foreach (var item in TrainerList)
                    {
                        <SelectItem TValue="Guid" Value="@item.Id">
                            @item.Name
                        </SelectItem>
                    }
                </Select>
            </Field>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="() => PlaceOrder(SelectedProduct)">
                    Sat
                </Button>
            </Column>

        </ModalBody>
        <ModalFooter>

        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="appointmentRef">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle> @selectedName isimli üyeye Randevu Tüketimi Kayıt Ediliyor</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Açıklama</FieldLabel>
                <TextEdit @bind-Text="@appointmentTransactionCreateDto.Description"></TextEdit>
            </Field>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="() => CreateAppointmentTransaction()">
                    Kaydet
                </Button>
            </Column>

        </ModalBody>
        <ModalFooter>

        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    @inject NavigationManager NavigationManager
    private IReadOnlyList<MemberDto> MemberList { get; set; } = new List<MemberDto>();
    private IReadOnlyList<TrainerDto> TrainerList { get; set; } = new List<TrainerDto>();
    private IReadOnlyList<ProductDto> ProductList { get; set; } = new List<ProductDto>();
    private GetMemberListInput Filter { get; set; } = new GetMemberListInput();
    private int CurrentPage { get; set; }
    private string CurrentSorting { get; set; }
    private int TotalCount { get; set; }
    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
    private Guid SelectedId;
    private string selectedName;
    private Modal modalRef;
    private Modal productModalRef;
    private Modal stockModelRef;
    private Modal appointmentRef;
    private MemberOrderAppointmentCreateDto appointmentDto { get; set; } = new MemberOrderAppointmentCreateDto();
    private ProductDto SelectedProduct = new ProductDto();
    private AppointmentTransactionCreateDto appointmentTransactionCreateDto = new AppointmentTransactionCreateDto();
    protected virtual async Task OnDataGridReadAsync(DataGridReadDataEventArgs<MemberDto> e)
    {
        //var result = await _exerciseService.GetListAsync(Filter);
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != SortDirection.Default)
            .Select(c => c.SortField + (c.SortDirection == SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page;
        Filter.MaxResultCount = PageSize;
        Filter.SkipCount = (CurrentPage - 1) * PageSize;
        Filter.Sorting = CurrentSorting;
        var result = await _memberService.GetListAsync(Filter);
        MemberList = result.Items;
        TotalCount = (int)result.TotalCount;
        //await GetEntitiesAsync();

        await InvokeAsync(StateHasChanged);
    }


    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Filter.MaxResultCount = PageSize;
            Filter.SkipCount = (CurrentPage - 1) * PageSize;
            Filter.Sorting = CurrentSorting;
            var result = await _memberService.GetListAsync(Filter);
            MemberList = result.Items;
            TotalCount = (int)result.TotalCount;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        //var result = await _exerciseService.GetListAsync(Filter);
        Filter.MaxResultCount = PageSize;
        Filter.SkipCount = 0;
        Filter.Sorting = CurrentSorting;
        var result = await _memberService.GetListAsync(Filter);
        TrainerList = await _trainerService.GetAllTrainerForMember();
        MemberList = result.Items;
        TotalCount = (int)result.TotalCount;
    }
    [Authorize(ManagementPermissions.Member.Delete)]
    private async Task DeleteData(MemberDto dto)
    {
        try
        {
            await _memberService.DeleteAsync(dto.Id);
            var result = await _memberService.GetListAsync(Filter);
            MemberList = result.Items;
            TotalCount = (int)result.TotalCount;
            await Notify.Success("Üye silindi");
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
        [Authorize(ManagementPermissions.Member.AddProduct)]
    private async Task OpenProductModel(Guid id,string memberName)
    {
        try
        {
            SelectedId = id;
            selectedName = memberName;
            ProductList = (await _productService.GetListAsync(new PagedAndSortedResultRequestDto { MaxResultCount = 999 })).Items;
            await modalRef.Show();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
    [Authorize(ManagementPermissions.Member.AddAppointment)]
    private async Task OpenStockModel(Guid id, string memberName)
    {
        try
        {
            SelectedId = id;
            selectedName = memberName;
            await stockModelRef.Show();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
    
    private void NavigateToPage(Guid id)
    {
        NavigationManager.NavigateTo($"/memberevent/{id}", true);
    }
    [Authorize(ManagementPermissions.Member.Create)]
    private async Task AddData()
    {
        try
        {
            var validate = true;
            if (CreateValidationsRef != null)
            {
                validate = await CreateValidationsRef.ValidateAll();
            }
            if (validate)
            {
                //await _exerciseService.AnyName(NewEntity.Name);
                var data = await _memberService.CreateAsync(NewEntity);

                var result = await _memberService.GetListAsync(Filter);
                MemberList = result.Items;
                TotalCount = (int)result.TotalCount;
                await InvokeAsync(CreateModal.Hide);
                await Notify.Success("Üye eklendi");
            }

        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
    [Authorize(ManagementPermissions.Member.Edit)]
    private async Task EditData()
    {
        try
        {
            var validate = true;
            if (EditValidationsRef != null)
            {
                validate = await EditValidationsRef.ValidateAll();
            }
            if (validate)
            {
                var data = await _memberService.UpdateAsync(EditingEntityId, EditingEntity);
                var result = await _memberService.GetListAsync(Filter);
                MemberList = result.Items;
                TotalCount = (int)result.TotalCount;
                await InvokeAsync(EditModal.Hide);
                await Notify.Success("Üye güncellendi");
            }

        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
        [Authorize(ManagementPermissions.Member.AddProduct)]
    private async Task PlaceOrder(ProductDto dto)
    {
        try
        {
            var confirmed = await Message.Confirm($"{dto.Quantity} adet {dto.Name} satmak istediğinize eminmisiniz ?");
            if (confirmed)
            {
                await _memberOrderService.PlaceOrder(dto, SelectedId);
                dto.Quantity = 0;
                await Message.Success("Satış tamamlandı");
                var result = await _memberService.GetListAsync(Filter);
                MemberList = result.Items;
                TotalCount = (int)result.TotalCount;
                await productModalRef.Close(CloseReason.None);
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
        
    }
    [Authorize(ManagementPermissions.Member.AddProduct)]
    private async Task OpenOrderModel(ProductDto dto)
    {
        SelectedProduct = dto;
        SelectedProduct.TrainerId = TrainerList.FirstOrDefault().Id;
        await productModalRef.Show();
        await modalRef.Close(CloseReason.None);
    }
    [Authorize(ManagementPermissions.Member.AddAppointment)]
    private async Task PlaceOrderStock(MemberOrderAppointmentCreateDto dto)
    {
        var confirmed = await Message.Confirm($"{selectedName} isimli üyeye {dto.UnitPrice * dto.AppointmentStock} TL değerinde {dto.AppointmentStock} adet randevu tanımlanacak");
        if (confirmed)
        {
            await _memberOrderService.PlaceOrderAppointment(dto, SelectedId);
            dto = null;
            await Message.Success("Randevu paketi tanımlandı");
            var result = await _memberService.GetListAsync(Filter);
            MemberList = result.Items;
            TotalCount = (int)result.TotalCount;
        }
    }
    private async Task OpenAppointmentTransaction(Guid id, string memberName)
    {
        selectedName = memberName;
        appointmentTransactionCreateDto.MemberId = id;
        await appointmentRef.Show();
    }
    private async Task CreateAppointmentTransaction()
    {
        try
        {
            var confirmed = await Message.Confirm($"{selectedName} isimli üyeye randevu tüketimi tanımlanacak");
            if (confirmed)
            {
                await _memberService.CommitAppointment(appointmentTransactionCreateDto);
                await Message.Success("Randevu tüketi tanımlandı");
                await appointmentRef.Close(CloseReason.None);
                var result = await _memberService.GetListAsync(Filter);
                MemberList = result.Items;
                TotalCount = (int)result.TotalCount;
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
}
