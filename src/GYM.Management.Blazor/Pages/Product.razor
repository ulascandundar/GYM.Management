@page "/product"
@attribute [Authorize(ManagementPermissions.Product.Default)]
@using GYM.Management.Localization;
@using GYM.Management.Losses;
@using GYM.Management.Permissions;
@using GYM.Management.Products;
@using GYM.Management.StockTakings;
@using Microsoft.Extensions.Localization;
@using Volo.Abp.Application.Dtos;
@inject IStringLocalizer<ManagementResource> L
@inherits AbpCrudPageBase<IProductService, ProductDto, Guid, PagedAndSortedResultRequestDto, ProductCreateDto>
@inject IProductService _productService
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>Ürünler</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    Yeni Ürün
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ProductDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="ProductDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="ProductDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="ProductDto"
                                          Text="Güncelle"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="ProductDto"
                                          Text="Sil"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />

                            <EntityAction TItem="ProductDto"
                                          Text="Stok Sayımı Yap"
                                          Clicked="() => OpenStockTaking(context)" />

                            <EntityAction TItem="ProductDto"
                                          Text="Stok Siparişi"
                                          Clicked="() => OpenStockOrder(context)" />

                            <EntityAction TItem="ProductDto"
                                          Text="Zaiyat Girişi"
                                          Clicked="() => OpenLoss(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.Name)"
                                Caption="İsim"></DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.BuyPrice)"
                                Caption="Fiyat">
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.Description)"
                                Caption="Açıklama"></DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.Stock)"
                                Caption="Stok"></DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.StockPrice)"
                                Caption="Stok Birim Fiyatı"></DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.CreationTime)"
                                Caption="Eklenme Tarihi">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>Yeni Ürün</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Açıklama</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Başlangıç Stoğu</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="@NewEntity.Stock">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Stok Fiyatı</FieldLabel>
                            <NumericEdit TValue="decimal" @bind-Value="@NewEntity.StockPrice">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>Satış Fiyat</FieldLabel>
                        <NumericEdit TValue="decimal" @bind-Value="NewEntity.BuyPrice" />
                    </Field>
                   
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Açıklama</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Stok Fiyatı</FieldLabel>
                            <NumericEdit TValue="decimal" @bind-Value="@EditingEntity.StockPrice">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </Field>
                    </Validation>
                   
                    <Field>
                        <FieldLabel>Fiyat</FieldLabel>
                        <NumericEdit TValue="decimal" @bind-Value="EditingEntity.BuyPrice" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="modalRef">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle> (@stockTakingCreateDto.ProductName) Stok Sayımı Yapılıyor...</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Sayılan Stok</FieldLabel>
                <NumericPicker TValue="int" @bind-Value="stockTakingCreateDto.NewStock"></NumericPicker>

            </Field>
            <Field>
                <FieldLabel>Açıklama</FieldLabel>
                <TextEdit @bind-Text="stockTakingCreateDto.Description"></TextEdit> 

            </Field>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="() => StockTaking()">
                    Ekle
                </Button>
            </Column>

        </ModalBody>
        <ModalFooter>

        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalStockOrderRef">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle> (@selectedProductName) Stok Siparişi Yapılıyor...</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Sipariş Stok Adedi</FieldLabel>
                <NumericPicker TValue="int" @bind-Value="stockOrderCreateDto.Quantity"></NumericPicker>

            </Field>
            <Field>
                <FieldLabel>Açıklama</FieldLabel>
                <TextEdit @bind-Text="stockOrderCreateDto.Description"></TextEdit>

            </Field>
            <Field>
                <FieldLabel>Toplam Tutar</FieldLabel>
                <Label>@(stockOrderCreateDto.Quantity * stockOrderCreateDto.StockBuyPrice) TL</Label>
            </Field>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="() => StockOrder()">
                    Ekle
                </Button>
            </Column>

        </ModalBody>
        <ModalFooter>

        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalLossRef">
    <ModalContent Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle> (@selectedProductName) Zaiyat Ekleniyor...</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Zaiyat Adedi</FieldLabel>
                <NumericPicker TValue="int" @bind-Value="lossCreateDto.Quantity"></NumericPicker>

            </Field>
            <Field>
                <FieldLabel>Açıklama</FieldLabel>
                <TextEdit @bind-Text="lossCreateDto.Description"></TextEdit>

            </Field>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="() => LossCreate()">
                    Ekle
                </Button>
            </Column>

        </ModalBody>
        <ModalFooter>

        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    public Product()
    {
        CreatePolicyName = ManagementPermissions.Product.Create;
        UpdatePolicyName = ManagementPermissions.Product.Edit;
        DeletePolicyName = ManagementPermissions.Product.Delete;
    }
    private Modal modalRef;
    private Modal modalStockOrderRef;
    private Modal modalLossRef;
    StockTakingCreateDto stockTakingCreateDto = new StockTakingCreateDto();
    StockOrderCreateDto stockOrderCreateDto = new StockOrderCreateDto();
    LossCreateDto lossCreateDto = new LossCreateDto();
    private string selectedProductName = "";
    private async Task OpenStockTaking(ProductDto dto)
    {
        stockTakingCreateDto = new StockTakingCreateDto { NewStock = dto.Stock, ProductName = dto.Name, ProductId = dto.Id };
        await modalRef.Show();
    }
    private async Task OpenStockOrder(ProductDto dto)
    {
        stockOrderCreateDto = new StockOrderCreateDto { ProductId = dto.Id,StockBuyPrice = dto.StockPrice };
        selectedProductName = dto.Name;
        await modalStockOrderRef.Show();
    }

    private async Task OpenLoss(ProductDto dto)
    {
        lossCreateDto = new LossCreateDto { ProductId = dto.Id};
        selectedProductName = dto.Name;
        await modalLossRef.Show();
    }

    private async Task StockTaking()
    {
        try
        {
            var confirmed = await Message.Confirm($"{stockTakingCreateDto.NewStock} adet {stockTakingCreateDto.ProductName} olduğuna eminmisiniz ?");
            await _productService.StockTaking(stockTakingCreateDto);
            await modalRef.Close(CloseReason.None);
            await OnCreatedEntityAsync();
            await Message.Success("Stok Sayımı Tamamlandı");
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task StockOrder()
    {
        try
        {
            var confirmed = await Message.Confirm($"{stockOrderCreateDto.Quantity} adet {selectedProductName} almak istediğinize eminmisiniz ?");
            if (confirmed)
            {
                await _productService.StockOrder(stockOrderCreateDto);
                await modalStockOrderRef.Close(CloseReason.None);
                await OnCreatedEntityAsync();
                await Message.Success("Sipariş Tamamlandı");
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task LossCreate()
    {
        try
        {
            var confirmed = await Message.Confirm($"{lossCreateDto.Quantity} adet {selectedProductName} zaiyatı eklemek istediğinize eminmisiniz ?");
            if (confirmed)
            {
                await _productService.CreateLoss(lossCreateDto);
                await modalLossRef.Close(CloseReason.None);
                await OnCreatedEntityAsync();
                await Message.Success("Zaiyat Tamamlandı");
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task CreateEntityAsync()
    {
        try
        {
            var validate = true;
                await OnCreatingEntityAsync();

                await CheckCreatePolicyAsync();
                var createInput = MapToCreateInput(NewEntity);
                await AppService.CreateAsync(createInput);
                await OnCreatedEntityAsync();
                await Message.Success("Yeni Ürün Eklendi");
            
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }
}
