@page "/category"
@attribute [Authorize(ManagementPermissions.Category.Default)]
@using GYM.Management.Permissions
@using Microsoft.AspNetCore.Authorization
@using GYM.Management.Categories;
@using GYM.Management.ExerciseCategories;
@using GYM.Management.Exercises;
@using Volo.Abp.Application.Dtos
@using GYM.Management.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ManagementResource> L
@inherits AbpCrudPageBase<ICategoryService, CategoryDto, Guid, PagedAndSortedResultRequestDto, CategoryCreateDto>
@inject ICategoryService _service
@inject IExerciseService _exerciseService
@inject IExerciseCategoryService _exerciseCategoryService
<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>Kategoriler</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    Yeni Kategori
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="CategoryDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="CategoryDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="CategoryDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="CategoryDto"
                                          Text="Güncelle"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="CategoryDto"
                                          Text="Sil"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                            <EntityAction TItem="CategoryDto"
                                          Text="Egzersizleri düzenle"
                                          Clicked="() => ShowModal(context.Id)" />

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="CategoryDto"
                                Field="@nameof(CategoryDto.Name)"
                                Caption="İsim"></DataGridColumn>
                <DataGridColumn TItem="CategoryDto"
                                Field="@nameof(CategoryDto.Description)"
                                Caption="Açıklama"></DataGridColumn>
                <DataGridColumn TItem="CategoryDto"
                                Field="@nameof(CategoryDto.CreationTime)"
                                Caption="Eklenme Tarihi">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>
<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>Yeni Kategori</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Açıklama</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>İsim</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Açıklama</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">İptal</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">Kaydet</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
<Modal @ref="modalRef">
    <ModalContent Size="ModalSize.Fullscreen">
        <ModalHeader>
            <ModalTitle>Kategoriye dahil egzersizler</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>
                
                <Column ColumnSize="ColumnSize.Is6">
                    <Alert Color="Color.Success" Visible>
                        <AlertMessage>@categoryWithExercises.CategoryName e dahil olan egzersizler</AlertMessage>
                    </Alert>
                    <Table FixedHeader FixedHeaderTableHeight="300px">
                        <TableHeader>
                            
                            <TableRow>
                                <TableHeaderCell>İsim</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (categoryWithExercises.ExerciseDtos != null)
                            {
                                @foreach (var item in categoryWithExercises.ExerciseDtos)
                                {
                                    <TableRow>
                                        <TableRowCell>@item.Name</TableRowCell>
                                        <TableRowCell>
                                            <Button Clicked="()=> Remove(categoryWithExercises.CategoryId,item.Id)" Color="Color.Danger">Kaldır</Button>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            }

                        </TableBody>
                    </Table>
                </Column>
                
                <Column ColumnSize="ColumnSize.Is6">
                    <Alert Color="Color.Success" Visible>
                    <AlertMessage>@categoryWithExercises.CategoryName e dahil olmayan egzersizler</AlertMessage>
                </Alert>
                    <Table FixedHeader FixedHeaderTableHeight="300px">
                        <TableHeader>
                            
                            <TableRow>
                                <TableHeaderCell>İsim</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (withouts != null)
                            {
                                @foreach (var item in withouts)
                                {
                                    <TableRow>
                                        <TableRowCell>@item.Name</TableRowCell>
                                        <TableRowCell>
                                            <Button Clicked="()=> IncludeExercise(categoryWithExercises.CategoryId,item.Id)" Color="Color.Success">Dahil Et</Button>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            }

                        </TableBody>
                    </Table>
                </Column>
            </Row>
            
        </ModalBody>
        <ModalFooter>
            
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    public Category()
    {
        CreatePolicyName = ManagementPermissions.Category.Create;
        UpdatePolicyName = ManagementPermissions.Category.Edit;
        DeletePolicyName = ManagementPermissions.Category.Delete;
    }
    [Inject] IMessageService MessageService { get; set; }
    private Modal modalRef;
    CategoryWithExercises categoryWithExercises = new CategoryWithExercises();
    List<ExerciseDto> withouts = new List<ExerciseDto>();
    [Authorize(ManagementPermissions.Category.Edit)]
    private async Task ShowModal(Guid id)
    {
        categoryWithExercises = await _service.GetExercisesByCategoryId(id);
        withouts = (await _exerciseService.GetListAsync(new PagedAndSortedResultRequestDto{MaxResultCount = 999})).Items.ToList();
        withouts = withouts.Where(o => !categoryWithExercises.ExerciseDtos.Any(a => a.Id == o.Id)).ToList();
        await modalRef.Show();
    }
    [Authorize(ManagementPermissions.Category.Edit)]
    private async Task IncludeExercise(Guid categoryId, Guid exerciseId)
    {
        var data = withouts.Where(o=>o.Id == exerciseId).FirstOrDefault();
        categoryWithExercises.ExerciseDtos.Add(data);
        withouts.Remove(data);
        await _exerciseCategoryService.AddExerciseCategory(categoryId, exerciseId);
    }
    [Authorize(ManagementPermissions.Category.Edit)]
    private async Task Remove(Guid categoryId, Guid exerciseId)
    {
        var confirmed = await Message.Confirm("Kaldırmak istediğine eminmisin ?");
        if (confirmed)
        {
            var data = categoryWithExercises.ExerciseDtos.Where(o => o.Id == exerciseId).FirstOrDefault();
            withouts.Add(data);
            categoryWithExercises.ExerciseDtos.Remove(data);
            await _exerciseCategoryService.Remove(categoryId, exerciseId);
        }
    }
    private Task HideModal()
    {
        categoryWithExercises = null;
        withouts = null;
        return modalRef.Hide();
    }
}
