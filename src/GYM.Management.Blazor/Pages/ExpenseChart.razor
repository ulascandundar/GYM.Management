@*@page "/expensechart"
@using Blazorise.Charts;
@using GYM.Management.Expenses;
@using GYM.Management.Localization;
@using Microsoft.Extensions.Localization;
@using System.Globalization;
@inherits ManagementComponentBase
@inject IStringLocalizer<ManagementResource> L
@inject IExpenseService _expenseService
<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <Field>
            <FieldLabel>Başlangıç Tarihi</FieldLabel>
            <InputDate @bind-Value="expenseReport.StartDate" />
        </Field>
    </Column>

    <Column ColumnSize="ColumnSize.Is6">
        <Field>
            <FieldLabel>Bitiş Tarihi</FieldLabel>
            <InputDate @bind-Value="expenseReport.EndDate" />
        </Field>

    </Column>
    <Field>
        <Button Color="Color.Primary" Clicked="() => HandleRedraw()">Filtrele</Button>
    </Field>
</Row>

<Row>
    <Column ColumnSize="ColumnSize.Is6">
        <Chart @ref="barChart" Type="ChartType.Bar" TItem="double" />
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <LineChart @ref="lineChart" TItem="double" />
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        <LineChart @ref="lineChartAvarage" TItem="double" />
    </Column>
</Row>



@code {
    Chart<double>? barChart;
    LineChart<double> lineChart;
    LineChart<double> lineChartAvarage;
    ExpenseReportInputDto expenseReport = new ExpenseReportInputDto { StartDate = DateTime.Today.AddDays(-1), EndDate = DateTime.Today };
    private List<ExpenseDto> result = new List<ExpenseDto>();
    int expenseCount = 0;
    decimal expenseSum = 0;
    decimal salarySum = 0;
    decimal spendingSum = 0;
    decimal walletSum = 0;
    decimal stockOrder = 0;
    decimal stockLeak = 0;
    decimal lossSum = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    private async Task HandleRedraw()
    {
        await barChart.Clear();
        var datas = await GetBarChartDataset();
        await barChart.AddLabelsDatasetsAndUpdate(Labels, datas);
        await HandleRedraw1();
        await HandleRedraw2();
    }

    private async Task<BarChartDataset<double>> GetBarChartDataset()
    {
        BarChartDataset<double> chart = new()
            {
                Label = "Gider",
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1
            };
        chart.Data = await GetReports();
        return chart;

    }

    string[] Labels = { "Standart Harcama", "Maaş Ödeme", "Cüzdandan Para Çekme", "Stok Siparişi", "Stok Sayımı","Zaiyat" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(153, 102, 255, 1f) };

    List<DayData> GetDayData()
    {
        var culture = new CultureInfo("tr-TR");
        return result.GroupBy(o => o.Date.DayOfWeek).Select(o => new DayData { Day = culture.DateTimeFormat.GetDayName(o.Key), Sum = o.Sum(o => (double)o.Amount) }).ToList();
    }

    List<DayData> GetDayDataAvarage()
    {
        var culture = new CultureInfo("tr-TR");
        return result.GroupBy(o => o.Date.DayOfWeek).Select(o => new DayData { Day = culture.DateTimeFormat.GetDayName(o.Key),
                Sum = Math.Round(o.Average(o => (double)o.Amount), 2)
            }).ToList();
    }
    private async Task<List<double>>  GetReports()
    {
        result = await _expenseService.GetReports(expenseReport);
        expenseCount = result.Count;
        expenseSum = result.Sum(o => o.Amount);
        salarySum = result.Where(o => o.ExpenseType == ExpenseType.Salary).Sum(o => o.Amount);
        spendingSum = result.Where(o => o.ExpenseType == ExpenseType.Spending).Sum(o => o.Amount);
        walletSum = result.Where(o => o.ExpenseType == ExpenseType.Wallet).Sum(o => o.Amount);
        stockOrder = result.Where(o => o.ExpenseType == ExpenseType.StockOrder).Sum(o => o.Amount);
        stockLeak = result.Where(o => o.ExpenseType == ExpenseType.StockLeak).Sum(o => o.Amount);
        lossSum = result.Where(o => o.ExpenseType == ExpenseType.Loss).Sum(o => o.Amount);
        return new List<double> { Decimal.ToDouble(spendingSum),
            Decimal.ToDouble(salarySum), Decimal.ToDouble(walletSum), Decimal.ToDouble(stockOrder), Decimal.ToDouble(stockLeak),Decimal.ToDouble(lossSum) };

    }
    //Task OnClicked(ChartMouseEventArgs e)
    //{
    //    var model = e.Model as BarChartModel;
    //    Message.Info($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
    //    Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
    //    return Task.CompletedTask;
    //}
    async Task HandleRedraw1()
    {
        await lineChart.Clear();
        var labels = GetDayData().Select(o => o.Day).ToList();
        await lineChart.AddLabelsDatasetsAndUpdate(labels, GetLineChartDataset());
    }

    async Task HandleRedraw2()
    {
        await lineChartAvarage.Clear();
        var labels = GetDayDataAvarage().Select(o => o.Day).ToList();
        await lineChartAvarage.AddLabelsDatasetsAndUpdate(labels, GetLineChartDatasetAvarage());
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return (new LineChartDataset<double>
            {
                Label = "Gün Toplamı",
                Data = GetDayData().Select(o=>o.Sum).ToList(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            });
    }

    LineChartDataset<double> GetLineChartDatasetAvarage()
    {
        return (new LineChartDataset<double>
            {
                Label = "Gün Ortalaması",
                Data = GetDayDataAvarage().Select(o => o.Sum).ToList(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            });
    }

    string[] Labels1 = { "Pazartesi", "Salı", "Çarşambalar", "Perşembe", "Cuma", "Cumartesi","Pazar" };

}
*@